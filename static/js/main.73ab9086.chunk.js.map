{"version":3,"sources":["components/TextEditor.js","components/BoldMark.js","components/ItalicMark.js","components/FormatToolbar.js","App.js","serviceWorker.js","index.js"],"names":["existingValue","JSON","parse","localStorage","getItem","initialValue","Value","fromJSON","document","nodes","object","type","leaves","text","schema","last","normalize","editor","_ref","code","node","child","paragraph","Block","create","insertNodeByKey","key","size","blocks","image","isVoid","Image","styled","_templateObject","props","selected","insertImage","src","target","select","insertBlock","data","TextEditor","state","value","saveButton","blockLimit","fileSaved","ref","_this","onChange","_ref2","countBlocks","setState","onClickSave","event","preventDefault","Object","assertThisInitialized","content","stringify","toJSON","setItem","window","setTimeout","onClickCancel","onChangeBlockLimit","getBlocks","filter","block","onKeyDown","next","ctrlKey","toggleMark","renderMark","attributes","isFocused","mark","react_default","a","createElement","components_BoldMark","components_ItalicMark","children","renderNode","get","assign","onMarkClick","change","onClickImage","prompt","command","onClickImageUploadButton","getElementById","click","uploadImage","file","files","reader","FileReader","_file$type$split","split","slicedToArray","getEventRange","addEventListener","result","readAsDataURL","onDropOrPaste","transfer","getEventTransfer","isUrl","url","imageExtensions","find","endsWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","_file$type$split3","_iterator","Symbol","iterator","done","err","return","_this2","this","react","components_FormatToolbar","onPointerDown","className","react_icons_kit_default","icon","bold","italic","list","onMouseDown","name","id","disabled","slate_react_es","onDrop","onPaste","Component","BoldMark","ItalicMark","property","FormatToolbar","App","components_TextEditor","React","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73ab9086.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Editor, getEventRange, getEventTransfer } from 'slate-react'\nimport { Block, Value } from 'slate'\nimport styled from 'react-emotion'\nimport imageExtensions from 'image-extensions'\nimport isUrl from 'is-url'\n\nimport Icon from 'react-icons-kit'\nimport { bold } from 'react-icons-kit/feather/bold'\nimport { italic } from 'react-icons-kit/feather/italic'\nimport { list } from 'react-icons-kit/feather/list'\nimport { image } from 'react-icons-kit/feather/image'\n\nimport { BoldMark, ItalicMark, FormatToolbar } from './index'\n\n// Update the initial content to be pulled from Local Storage if it exists.\nconst existingValue = JSON.parse(localStorage.getItem('content'))\nlet initialValue = Value.fromJSON(\n  existingValue || {\n    document: {\n      nodes: [\n        {\n          object: 'block',\n          type: 'paragraph',\n          nodes: [\n            {\n              object: 'text',\n              leaves: [\n                {\n                  text: 'A line of text in a paragraph.'\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  }\n)\n\n// Schema\nconst schema = {\n  document: {\n    last: { type: 'paragraph' },\n    normalize: (editor, { code, node, child }) => {\n      switch (code) {\n        case 'last_child_type_invalid': {\n          const paragraph = Block.create('paragraph')\n          return editor.insertNodeByKey(node.key, node.nodes.size, paragraph)\n        }\n      }\n    }\n  },\n  blocks: {\n    image: {\n      isVoid: true\n    }\n  }\n}\n\n// A styled image block component.\nconst Image = styled('img')`\n  display: block;\n  max-width: 100%;\n  max-height: 20em;\n  box-shadow: ${props => (props.selected ? '0 0 0 2px blue;' : 'none')};\n  margin: 5px;\n`\n\nfunction isImage(url) {\n  return !!imageExtensions.find(url.endsWith)\n}\n\n// Insert Image\nfunction insertImage(editor, src, target) {\n  if (target) {\n    editor.select(target)\n  }\n\n  editor.insertBlock({\n    type: 'image',\n    data: { src }\n  })\n}\n\nclass TextEditor extends Component {\n  state = {\n    value: initialValue,\n    saveButton: false,\n    blockLimit: 99999999,\n    fileSaved: false\n  }\n\n  // Store a reference to the `editor`.\n  ref = editor => {\n    this.editor = editor\n  }\n\n  // On change, update the app's React state with the new editor value.\n  onChange = ({ value }) => {\n    // Check number of blocks and allowed blocks\n    if (this.countBlocks() > this.state.blockLimit) {\n      this.setState({ saveButton: true })\n    } else {\n      this.setState({ saveButton: false })\n    }\n\n    this.setState({ value })\n  }\n\n  // Save Button Click\n  onClickSave = event => {\n    event.preventDefault()\n\n    // If save button is disabled, do not save\n    if (this.state.saveButton) return\n\n    const { editor } = this\n    const { value } = editor\n\n    // Save the value to Local Storage.\n    const content = JSON.stringify(value.toJSON())\n    localStorage.setItem('content', content)\n\n    // Update initialValue\n    initialValue = Value.fromJSON(JSON.parse(localStorage.getItem('content')))\n\n    this.setState({ value, fileSaved: true })\n\n    window.setTimeout(() => {\n      this.setState({ fileSaved: false })\n    }, 1000)\n  }\n\n  // Cancel Button Click\n  onClickCancel = event => {\n    event.preventDefault()\n    this.setState({ value: initialValue })\n  }\n\n  // On change, block limit\n  onChangeBlockLimit = event => {\n    event.preventDefault()\n\n    // Check number of blocks and allowed blocks\n    if (this.countBlocks() > event.target.value) {\n      this.setState({ saveButton: true, blockLimit: event.target.value })\n    } else {\n      this.setState({ saveButton: false, blockLimit: event.target.value })\n    }\n  }\n\n  // count blocks\n  countBlocks = () => {\n    const { editor } = this\n    const { value } = editor\n\n    const countBlocks = value.document.getBlocks().filter(block => {\n      if (block.type === 'paragraph') {\n        if (block.text === '') return false\n        else return block\n      } else return block\n    })\n\n    return countBlocks.size\n  }\n\n  // On Key Down\n  onKeyDown = (event, editor, next) => {\n    // Return with no changes if the keypress is not 'Ctrl'\n    if (!event.ctrlKey) {\n      return next()\n    }\n\n    event.preventDefault()\n\n    switch (event.key) {\n      // When 'b' is pressed, add a 'bold' mark to the text\n      case 'b': {\n        editor.toggleMark('bold')\n        return true\n      }\n      // When 'i' is pressed, add a 'italic' mark to the text\n      case 'i': {\n        editor.toggleMark('italic')\n        return true\n      }\n      default: {\n        return next()\n      }\n    }\n  }\n\n  // Render a Slate Mark.\n  renderMark = (props, editor, next) => {\n    const { attributes, node, isFocused } = props\n\n    switch (props.mark.type) {\n      case 'bold':\n        return <BoldMark {...props} />\n\n      case 'italic':\n        return <ItalicMark {...props} />\n\n      case 'ul':\n        return (\n          <ul {...attributes}>\n            <li>{props.children}</li>\n          </ul>\n        )\n\n      case 'ol':\n        return (\n          <ol {...attributes}>\n            <li>{props.children}</li>\n          </ol>\n        )\n\n      default:\n        return next()\n    }\n  }\n\n  // Render a Slate node.\n  renderNode = (props, editor, next) => {\n    const { attributes, node, isFocused } = props\n\n    switch (node.type) {\n      case 'image': {\n        const src = node.data.get('src')\n        return <Image src={src} selected={isFocused} {...attributes} />\n      }\n\n      default: {\n        return next()\n      }\n    }\n  }\n\n  // Mark icons click action at toolbar\n  onMarkClick = (event, type) => {\n    event.preventDefault()\n\n    const { editor } = this\n    const { value } = editor\n    const change = editor.toggleMark(type)\n\n    this.onChange(change)\n  }\n\n  // Image Button Click\n  onClickImage = event => {\n    event.preventDefault()\n    const src = window.prompt('Enter the URL of the image:')\n    if (!src) return\n    this.editor.command(insertImage, src)\n  }\n\n  // Image Upload Button Click\n  onClickImageUploadButton = event => {\n    event.preventDefault()\n    document.getElementById('image-file').click()\n  }\n\n  // Image Upload\n  uploadImage = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n\n    const reader = new FileReader()\n\n    const [mime] = file.type.split('/')\n    if (mime !== 'image') return\n    const target = getEventRange(event, this.editor)\n    reader.addEventListener('load', () => {\n      this.editor.command(insertImage, reader.result, target)\n    })\n\n    const src = reader.readAsDataURL(file)\n    if (!src) return\n    this.editor.command(insertImage, src)\n  }\n\n  //  On drop, insert the image wherever it is dropped.\n  onDropOrPaste = (event, editor, next) => {\n    const target = getEventRange(event, editor)\n    if (!target && event.type === 'drop') return next()\n\n    const transfer = getEventTransfer(event)\n    const { type, text, files } = transfer\n\n    if (type === 'files') {\n      for (const file of files) {\n        const reader = new FileReader()\n        const [mime] = file.type.split('/')\n        if (mime !== 'image') continue\n\n        reader.addEventListener('load', () => {\n          editor.command(insertImage, reader.result, target)\n        })\n\n        reader.readAsDataURL(file)\n      }\n      return\n    }\n\n    if (type === 'text') {\n      if (!isUrl(text)) return next()\n      if (!isImage(text)) return next()\n      editor.command(insertImage, text, target)\n      return\n    }\n\n    next()\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div>\n          <p>\n            <strong>{'Slate.js Demo'}</strong>\n            {this.state.fileSaved && <span>{' (File Saved!)'}</span>}\n          </p>\n        </div>\n        <FormatToolbar>\n          <button\n            onPointerDown={event => this.onMarkClick(event, 'bold')}\n            className=\"tooltip-icon-button\"\n          >\n            <Icon icon={bold} />\n          </button>\n\n          <button\n            onPointerDown={event => this.onMarkClick(event, 'italic')}\n            className=\"tooltip-icon-button\"\n          >\n            <Icon icon={italic} />\n          </button>\n\n          <button\n            onPointerDown={event => this.onMarkClick(event, 'ul')}\n            className=\"tooltip-icon-button\"\n          >\n            <Icon icon={list} />\n            ul\n          </button>\n\n          <button\n            onPointerDown={event => this.onMarkClick(event, 'ol')}\n            className=\"tooltip-icon-button\"\n          >\n            <Icon icon={list} />\n            ol\n          </button>\n\n          <button onMouseDown={this.onClickImage}>\n            <Icon icon={image} />\n          </button>\n\n          <button onMouseDown={this.onClickImageUploadButton}>\n            <Icon icon={image} />\n          </button>\n          <input\n            type=\"file\"\n            name=\"image\"\n            className=\"image-file\"\n            id=\"image-file\"\n            onChange={this.uploadImage}\n          />\n\n          <select name=\"blockLimit\" onChange={this.onChangeBlockLimit}>\n            <option value={1}>1</option>\n            <option value={2}>2</option>\n            <option value={3}>3</option>\n            <option value={5}>5</option>\n            <option value={10}>10</option>\n            <option value={50}>50</option>\n            <option value={100}>100</option>\n            <option value={100}>100</option>\n            <option selected={true} value={99999999}>\n              Unlimited\n            </option>\n          </select>\n\n          <button\n            disabled={this.state.saveButton}\n            onMouseDown={this.onClickSave}\n          >\n            Save\n          </button>\n\n          <button onMouseDown={this.onClickCancel}>Cancel</button>\n        </FormatToolbar>\n\n        <Editor\n          ref={this.ref}\n          value={this.state.value}\n          schema={schema}\n          onChange={this.onChange}\n          onKeyDown={this.onKeyDown}\n          renderMark={this.renderMark}\n          renderNode={this.renderNode}\n          onDrop={this.onDropOrPaste}\n          onPaste={this.onDropOrPaste}\n        />\n      </Fragment>\n    )\n  }\n}\n\nexport default TextEditor\n","import React, { Component } from 'react'\n\nconst BoldMark = props => <strong>{props.children}</strong>\n\nexport default BoldMark\n","import React, { Component } from 'react'\n\nconst ItalicMark = props => <em property=\"italic\">{props.children}</em>\n\nexport default ItalicMark\n","import React, { Component } from 'react'\n\nconst FormatToolbar = props => (\n  <div className=\"format-toolbar\">{props.children}</div>\n)\n\nexport default FormatToolbar\n","import React from 'react'\nimport { TextEditor } from './components'\nimport './App.css'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TextEditor />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}